package com.playlist.service;

public class MusicaServiceTest {

    @Mock
    private MusicaRepository musicRepository;

    @Mock
    private PlaylistService playlistService;

    @InjectMocks
    private MusicaService musicService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void findByNome_shouldReturnList_whenFound() { // teste para encontrar a musica pelo nome
        Musica music1 = new Musica();
        music1.setTitulo("Música teste 1");

        Musica music2 = new Musica();
        music2.setTitulo("Música teste 2");

        List<Musica> musicList = List.of(music1, music2);

        when(musicaRepository.findByTituloContainingIgnoreCase("Test")).thenReturn(musicList);

        List<Musica> result = musicService.findByName("Test");

        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.stream().anyMatch(m -> m.getTitulo().equals("Música teste 1")));
        assertTrue(result.stream().anyMatch(m -> m.getTitulo().equals("Música teste 2")));
    }
    
    @Test
    void saveNewMusica_shouldSave_whenTituloDoesNotExist() { // teste para salvar nova musica
        Musica music = new Musica();
        music.setTitulo("Titulo Musica");

        when(musicaRepository.existsByTituloIgnoreCase("Titulo Musica")).thenReturn(false);

        musicService.saveNewMusic(music);

        verify(musicaRepository, times(1)).save(music);
    }
    
    @Test
    void saveNewMusica_shouldThrowException_whenTituloExists() { // teste para verificar se lança exception quando já tem uma música com o nome escolhido
        Musica music = new Musica();
        music.setTitulo("Titulo existente");

        when(musicaRepository.existsByTituloIgnoreCase("Titulo existente")).thenReturn(true);

        assertThrows(IllegalArgumentException.class, () -> {
            musicService.saveNewMusic(music);
        });

        verify(musicaRepository, never()).save(any());
    }

    @Test
    void updateMusica_shouldUpdate_whenValid() {
        Musica existingMusic = new Musica();
        existingMusic.setTitulo("Old Title");

        MusicaPostDTO dto = new MusicaPostDTO();
        dto.setTitulo("New Title");
        dto.setArtista("New Artist");
        dto.setAlbum("New Album");
        dto.setAno(2023);
        dto.setGenero("Pop");

        when(musicaRepository.findByTitulo("Old Title")).thenReturn(Optional.of(existingMusic));
        when(musicaRepository.existsByTituloIgnoreCase("New Title")).thenReturn(false);
        when(musicaRepository.save(any())).thenAnswer(invocation -> invocation.getArgument(0));

        Musica updated = musicService.updateMusic("Old Title", dto);

        assertEquals("New Title", updated.getTitulo());
        assertEquals("New Artist", updated.getArtista());
        assertEquals("New Album", updated.getAlbum());
        assertEquals(2023, updated.getAno());
        assertEquals("Pop", updated.getGenero());
    }

}